#!/bin/bash

# configure exit on error
set -e
set -o pipefail


clear

printHelp(){
    ### print help
    echo "usage: mvn-release [maven properties]";
    echo "e.g:   mvn-release -DskipTests";
}

release(){
    ### determine release informations

    echo "Determine release informations of project: $(basename `pwd`)"
    set +e
    CURRENT_VERSION=`mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version 2>/dev/null| grep -v "^\["`
    # we do it twice because during first start sometimes logging is injected.
    CURRENT_VERSION=`mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version 2>/dev/null| grep -v "^\["`

    if [ $? -gt 0 ]; then
        echo Could not detect current release version!
        mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version
        exit 4
    fi
    set -e

    if [ $CURRENT_VERSION == 1 ]; then
        echo "ERROR: Could not detect pom file! Check if the current folder contains a file called \"pom.xml\"."
        exit 2
    fi
    
    if [[ "${CURRENT_VERSION}" != *"-SNAPSHOT" ]]; then
        echo "ERROR: Current project Version[$CURRENT_VERSION] seems not to be a snapshot! Please check release branch!"
        exit 3
    fi

    

    RELEASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}
    RELEASE_VERSION=${FORECE_RELEASE_VERSION:-"${RELEASE_VERSION}"}  &&
    RELEASE_TAG=${FORCE_RELEASE_TAG:-"v${RELEASE_VERSION}"}  &&

    RELEASE_BRANCH=`git rev-parse --abbrev-ref HEAD`  &&

    

    IFS='.'
        VERSION_COMPONENTS=(${RELEASE_VERSION%-SNAPSHOT})
    IFS=''

    RELEASE_VERSION_MAJOR="${VERSION_COMPONENTS[0]}"
    RELEASE_VERSION_MINOR="${VERSION_COMPONENTS[1]}"

    IFS='-'
        if [[ "${VERSION_COMPONENTS[1]}" == *"-"* ]]; then
            VERSION_PATH_AND_META=(${VERSION_COMPONENTS[1]})
            RELEASE_VERSION_MINOR="${VERSION_PATH_AND_META[0]}"
            RELEASE_VERSION_META="-${VERSION_PATH_AND_META[1]}"
        elif [[ "${VERSION_COMPONENTS[2]}" == *"-"* ]]; then
            VERSION_PATH_AND_META=(${VERSION_COMPONENTS[2]})
            RELEASE_VERSION_PATCH="${VERSION_PATH_AND_META[0]}"
            RELEASE_VERSION_META="-${VERSION_PATH_AND_META[1]}"
        else
            # no meta availbale
            RELEASE_VERSION_PATCH="${VERSION_COMPONENTS[2]}"
            RELEASE_VERSION_META=""
        fi
    IFS=''
    
    # debug printing
    if ! [ -z "${VERBOSE}" ]; then
        echo CURRENT_VERSION $CURRENT_VERSION
        echo RELEASE_VERSION $RELEASE_VERSION
        echo RELEASE_VERSION_MAJOR $RELEASE_VERSION_MAJOR
        echo RELEASE_VERSION_MINOR $RELEASE_VERSION_MINOR
        echo RELEASE_VERSION_PATCH $RELEASE_VERSION_PATCH
        echo RELEASE_VERSION_META $RELEASE_VERSION_META
    fi

    # clear release type
    RELEASE_TYPE=''
    
    if [[ "${RELEASE_BRANCH}" == *"alpha"* ]]; then
        RELEASE_TYPE='alpha'
    fi
    
    if [[ "${RELEASE_BRANCH}" == *"beta"* ]]; then
        RELEASE_TYPE='beta'
    fi
   
    if [[ "${RELEASE_BRANCH}" == *"rc"* ]]; then
        RELEASE_TYPE='rc'
    fi

    if [ -z "${RELEASE_TYPE}" ]; then
        RELEASE_TYPE='stable'
        NEXT_RELEASE_VERSION=${FORCE_NEXT_RELEASE_VERSION:-"${RELEASE_VERSION%.*}.$((${RELEASE_VERSION##*.}+1))-SNAPSHOT"}
    else
        NEXT_RELEASE_VERSION=${CURRENT_VERSION}
        set +e
            echo git rev-list HEAD ^${RELEASE_TAG}-0 --count 2>/dev/null
            BUILD_NUMBER=`git rev-list HEAD ^${RELEASE_TAG}.0 --count 2>/dev/null`
            echo build $BUILD_NUMBER

        set -e
        BUILD_NUMBER=${BUILD_NUMBER:-0}
        RELEASE_TAG=$RELEASE_TAG'.'$BUILD_NUMBER
        RELEASE_VERSION=$RELEASE_VERSION'-'$BUILD_NUMBER
    fi

    ### verify release
    
    if [ -z "${CURRENT_VERSION}" ]; then
        echo "ERROR: Could not detect version!"
        exit 4
    fi
    
    if [ -z "${RELEASE_VERSION}" ]; then
        echo "ERROR: Could not detect release version!"
        exit 5
    fi
    
    if [ -z "${NEXT_RELEASE_VERSION}" ]; then
        echo "ERROR: Could not detect next release version!"
        exit 6
    fi
    
    if [ -z "${RELEASE_BRANCH}" ]; then
        echo "ERROR: Could not detect release branch version!"
        exit 7
    fi
    
    if [ -z "${RELEASE_TAG}" ]; then
        echo "ERROR: Could not detect release tag version!"
        exit 8
    fi
    
    # detect expected release branch, if the release type is forced an compatible release branch is expected
    if [ -z "${FORCED_RELEASE_TYPE}" ] || [ "${RELEASE_TYPE}" == "${FORCED_RELEASE_TYPE}" ]; then
          EXPECTED_RELEASE_BRANCH="release-"${RELEASE_VERSION_MAJOR}'.'${RELEASE_VERSION_MINOR}${RELEASE_VERSION_META}
    else
        # force release type
        EXPECTED_RELEASE_BRANCH="release-"${RELEASE_VERSION_MAJOR}'.'${RELEASE_VERSION_MINOR}'-'${FORCED_RELEASE_TYPE}
        RELEASE_TYPE=${FORCED_RELEASE_TYPE}
    fi  

    if [ "${RELEASE_BRANCH}" != "${EXPECTED_RELEASE_BRANCH}" ]; then
        if [ "${RELEASE_BRANCH}" == "master" ]; then
            #echo "DEBUG: Master branch detected..."
            #echo "DEBUG: check if master is fully merged into $EXPECTED_RELEASE_BRANCH."
            set +e
            git merge-base --is-ancestor origin/master origin/$EXPECTED_RELEASE_BRANCH 2>/dev/null
            if [ $? -eq 0 ]; then 
                echo "Latest $EXPECTED_RELEASE_BRANCH is up to date."
                git merge-base --is-ancestor origin/master origin/latest-stable
                if [ $? -eq 0 ]; then
                    echo "No release necessary."
                    set -e
                    return
                fi
            fi
            set -e

            if [ `git branch -a --list origin/$EXPECTED_RELEASE_BRANCH ` ]; then	
                echo "Release branch $EXPECTED_RELEASE_BRANCH found!"
                $DRY_RUN git checkout $EXPECTED_RELEASE_BRANCH
                $DRY_RUN git pull
                echo "Upgrade release branch..."
                $DRY_RUN git merge master
                echo "Upload release branch..."
                $DRY_RUN git push origin $EXPECTED_RELEASE_BRANCH
                release
                $DRY_RUN git checkout master
                return
            else
                echo "No release branch found!"

                if [ "${RELEASE_TYPE}" == 'stable' ]; then
                    VERSION_SUFFIX='.0'
                else
                    VERSION_SUFFIX='.0-'${RELEASE_TYPE}
                fi
                NEW_VERSION=${RELEASE_VERSION_MAJOR}'.'${RELEASE_VERSION_MINOR}${VERSION_SUFFIX}'-SNAPSHOT'

                echo "Should the release branch [$EXPECTED_RELEASE_BRANCH] be auto generated and the version updated to [${NEW_VERSION}]?"
                awaitConfirmation &&
                $DRY_RUN git checkout -b $EXPECTED_RELEASE_BRANCH
                $DRY_RUN git push origin $EXPECTED_RELEASE_BRANCH
                $DRY_RUN git branch --set-upstream-to=origin/$EXPECTED_RELEASE_BRANCH $EXPECTED_RELEASE_BRANCH
                $DRY_RUN mvn versions:set -DgenerateBackupPoms=false -DnewVersion=${NEW_VERSION}
                $DRY_RUN git commit -am "create release branch $EXPECTED_RELEASE_BRANCH and update version to ${NEW_VERSION}"
                $DRY_RUN git push
                echo "INFO: Release branch created. Please check dependencies and remove snapshot versions. Afterwards restart this release script."
                return
            fi
        fi
        echo "WARNING: Expected master or [$EXPECTED_RELEASE_BRANCH] branch but found [$RELEASE_BRANCH]!"
        echo "ERROR: Current Branch[$RELEASE_BRANCH] is not compatible to the pom defined release Version[$RELEASE_VERSION]!"
        return 55
    fi

    #echo "DEBUG: check if release has been changed since the last release has been performed"
    set +e
    git merge-base --is-ancestor origin/$EXPECTED_RELEASE_BRANCH origin/latest-stable
    if [ $? -eq 0 ]; then
        echo "Latest $EXPECTED_RELEASE_BRANCH is up to date. No release necessary."
        set -e
        return
    fi
        set -e
    
    ### repare release
    set -e    

    echo "================================================================================" &&
    echo " - current version:           $CURRENT_VERSION" &&
    echo " - release version:           $RELEASE_VERSION" &&
    echo " - next release version:      $NEXT_RELEASE_VERSION" &&
    echo "--------------------------------------------------------------------------------" &&
    echo " - release branch:            $RELEASE_BRANCH" && 
    echo " - release tag:               $RELEASE_TAG" &&
    echo " - release type:              $RELEASE_TYPE" &&
    if ! [ -z "$MVN_RELEASE_REPOSITORY" ]; then
        echo " - deployment repository:     $MVN_RELEASE_REPOSITORY"
    fi
    echo "================================================================================" &&
    
    awaitConfirmation

    ### perform release
    echo "=== verify build test and javadoc state ===" &&
    $DRY_RUN mvn clean install javadoc:javadoc $MVN_ARGS    
    echo "=== verify that all local changes are commited  ===" &&
    set +e
    
    # check for local changes
    $DRY_RUN git update-index -q --refresh
    $DRY_RUN git diff-index --quiet HEAD --
    if [ $? -ne 0 ] ; then
        # code changes detected
        echo "WARNING: There are local code changes detected! Please make sure all changes are commited into the remote repository and retry the release."
        exit 10
    fi
    set -e

    echo "=== prepare release ===" &&
    $DRY_RUN mvn release:prepare --batch-mode -DautoVersionSubmodules -Dresume=false -Dtag=$RELEASE_TAG -DreleaseVersion=$RELEASE_VERSION -DdevelopmentVersion=$NEXT_RELEASE_VERSION -DskipTests $MVN_ARGS &&
    echo "=== cleanup ===" && 
    $DRY_RUN mvn release:clean &&
    echo "=== checkout new release ==="
    $DRY_RUN git fetch --all
    $DRY_RUN git checkout $RELEASE_TAG
    echo "=== install release locally ==="
    $DRY_RUN mvn clean install -DskipTests $MVN_ARGS 

    echo "=== deploy to external repo ===" &&
    if [ -z "${MVN_RELEASE_REPOSITORY}" ]; then
        echo "INFO: Skip external deployment because no mvn repo was defined."
    else
        $DRY_RUN mvn deploy -DaltDeploymentRepository=releases::default::$MVN_RELEASE_REPOSITORY -DskipTests $MVN_ARGS
    fi

    if [[ "${RELEASE_TYPE}" == 'stable' ]]; then
        echo "=== upgrade latest-stable ===" &&
        set +e
            # delete maybe outdated branch because checkout can cause into merging conflicts
            $DRY_RUN git branch -D latest-stable 2> /dev/null
        set -e
        $DRY_RUN git checkout latest-stable &&
        $DRY_RUN git reset --hard $RELEASE_TAG &&
        $DRY_RUN git push origin latest-stable --force &&
        # cleanup latest-stable branch
        $DRY_RUN git checkout master
        $DRY_RUN git branch -d latest-stable
    fi

    echo "=== checkout and fast build release branch ===" && 
    $DRY_RUN git checkout ${RELEASE_BRANCH} &&
    $DRY_RUN git pull &&
    $DRY_RUN mvn clean install -DskipTests=true -Dmaven.test.skip=true -Dlicense.skipAddThirdParty=true -Dlicense.skipUpdateProjectLicense=true -Dlicense.skipDownloadLicenses -Dlicense.skipCheckLicense=true -Dmaven.license.skip=true $MVN_ARGS &&


    echo "=== finished ==="
}

awaitConfirmation(){
read -p "Please type y to confirm: " -n 1 -r &&
    echo &&  # new line
    if [[ ! $REPLY =~ ^[YyZz]$ ]]; then
        echo "Release aborted by user..."
        return 255
    fi
}



### verify and print help
if [ "${1}" == "-h" ]; then 
    printHelp
    exit 1
fi

MVN_ARGS=$@
release
